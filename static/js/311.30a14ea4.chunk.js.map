{"version":3,"file":"static/js/311.30a14ea4.chunk.js","mappings":"8OAIaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC5B,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAASC,EAAAA,EAAAA,IAAO,GAChBC,GAAWD,EAAAA,EAAAA,IAAO,GASlBE,EAAc,SAAAC,GAClB,MAAwBA,EAAIC,cAApBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MACd,OAAQV,GACN,IAAK,OACHC,EAAQS,GACR,MACF,IAAK,SACHP,EAAUO,GACV,MACF,QACE,OAEL,EAED,OACE,UAAC,KAAD,CAAMC,SAtBe,SAAAH,GACrBA,EAAII,iBACJd,EAAa,CAAEE,KAAAA,EAAME,OAAAA,IACrBD,EAAQ,IACRE,EAAU,GACX,EAiBC,WACE,SAAC,KAAD,CAAOU,QAAST,EAAhB,mBACA,SAAC,KAAD,CACEU,aAAa,MACbC,GAAIX,EACJY,KAAK,OACLhB,KAAK,OACLU,MAAOV,EACPiB,SAAUV,EACVW,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,SAAC,KAAD,CAAOP,QAASP,EAAhB,qBACA,SAAC,KAAD,CACEQ,aAAa,MACbC,GAAIT,EACJI,MAAOR,EACPe,SAAUV,EACVS,KAAK,MACLhB,KAAK,SACLkB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,SAAC,KAAD,CAAQJ,KAAK,SAAb,2BAGL,E,4DC3BD,EA1BqB,WACnB,IAAMK,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAe7B,OACE,iCACE,SAAC,KAAD,yCACA,SAAC5B,EAAD,CAAaC,aAXK,SAAA4B,IALF,SAAC,GAAc,IAAZ1B,EAAW,EAAXA,KAErB,OADeuB,EAASI,MAAK,SAAAC,GAAI,OAAIA,EAAK5B,OAASA,CAAlB,GAElC,CAGK6B,CAAYH,IAIhBI,QAAQC,IAAIL,GACZL,GAASW,EAAAA,EAAAA,IAAWN,MAJlBO,EAAAA,EAAAA,IAAUP,EAKb,KAKG,SAAC,KAAD,MAGL,C,qIC9BYQ,EAAQC,EAAAA,GAAAA,GAAH,6FAMLC,EAAWD,EAAAA,GAAAA,GAAH,iHAORE,EAAeF,EAAAA,GAAAA,EAAH,4H,8JCbZG,EAAOH,EAAAA,GAAAA,KAAH,qIASJI,EAAQJ,EAAAA,GAAAA,MAAH,oEAKLK,EAAQL,EAAAA,GAAAA,MAAH,oGAMLM,EAASN,EAAAA,GAAAA,OAAH,6O,wDCrBZ,IAkBI9B,EAAS,eAACqC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC/B,EAAIgC,GAWvD,OAREhC,IAFFgC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/ContactForm/ContactForm.jsx","Pages/CustomerPage/CustomerPage.jsx","components/AppStyle.jsx","components/ContactForm/ContactFormStyle.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { Form, Label, Input, Button } from './ContactFormStyle';\r\n\r\nexport const ContactForm = ({ onAddContacs }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const nameId = nanoid(5);\r\n  const numberId = nanoid(5);\r\n\r\n  const submitContacts = evt => {\r\n    evt.preventDefault();\r\n    onAddContacs({ name, number });\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const inputChange = evt => {\r\n    const { name, value } = evt.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={submitContacts}>\r\n      <Label htmlFor={nameId}>Name</Label>\r\n      <Input\r\n        autoComplete=\"off\"\r\n        id={nameId}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={name}\r\n        onChange={inputChange}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n      />\r\n      <Label htmlFor={numberId}>Number</Label>\r\n      <Input\r\n        autoComplete=\"off\"\r\n        id={numberId}\r\n        value={number}\r\n        onChange={inputChange}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n        required\r\n      />\r\n      <Button type=\"submit\">Add contact</Button>\r\n    </Form>\r\n  );\r\n};\r\n","import { ContactForm } from '../../components/ContactForm/ContactForm';\r\nimport { Title } from '../../components/AppStyle';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContact } from '../../redux/selectors';\r\nimport { addContact } from 'redux/Contacts/contactsOperation';\r\nimport { dublicate } from 'components/Notifigation/Notification';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nconst CustomerPage = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContact);\r\n\r\n  const isDublicate = ({ name }) => {\r\n    const result = contacts.find(item => item.name === name);\r\n    return result;\r\n  };\r\n\r\n  const onAddContacts = data => {\r\n    if (isDublicate(data)) {\r\n      dublicate(data);\r\n      return;\r\n    }\r\n    console.log(data);\r\n    dispatch(addContact(data));\r\n  };\r\n  return (\r\n    <>\r\n      <Title>Add contacts in Phonebook</Title>\r\n      <ContactForm onAddContacs={onAddContacts} />\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomerPage;\r\n","import styled from 'styled-components';\r\n\r\nexport const Title = styled.h1`\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  padding-top: 40px;\r\n`;\r\n\r\nexport const SubTitle = styled.h2`\r\n  font-size: 35px;\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n  padding-top: 40px;\r\n`;\r\n\r\nexport const ErrorMessage = styled.p`\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  color: red;\r\n  margin-top: 60px;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 400px;\r\n\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  font-size: 25px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 350px;\r\n  height: 20px;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n`;\r\nexport const Button = styled.button`\r\n  width: 100px;\r\n  background-color: #3ca9ba;\r\n  border: transparent;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  :hover,\r\n  :focus {\r\n    background-color: #4f94f3;\r\n  }\r\n`;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","onAddContacs","useState","name","setName","number","setNumber","nameId","nanoid","numberId","inputChange","evt","currentTarget","value","onSubmit","preventDefault","htmlFor","autoComplete","id","type","onChange","pattern","title","required","dispatch","useDispatch","contacts","useSelector","getContact","data","find","item","isDublicate","console","log","addContact","dublicate","Title","styled","SubTitle","ErrorMessage","Form","Label","Input","Button","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}